PS C:\Users\User\Desktop\Freelance Hiring Platform\backend> npm test

> dr-billerz@1.0.0 test
> jest --coverage --config=jest.config.js --detectOpenHandles

  console.log
    Notification created:  { notificationId: 1 }

      at Function.log [as createNotification] (app/controllers/notificationController.js:18:21)

  console.error
    Error creating notification: Error: DB Error
        at Object.<anonymous> (C:\Users\User\Desktop\Freelance Hiring Platform\backend\tests\notificationController.test.js:87:56)
        at Promise.then.completed (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\utils.js:298:28)  
        at new Promise (<anonymous>)
        at callAsyncCircusFn (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\utils.js:231:10)       
        at _callCircusTest (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\run.js:252:3)
        at _runTestsForDescribeBlock (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\run.js:126:9)  
        at _runTestsForDescribeBlock (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\run.js:121:9)  
        at _runTestsForDescribeBlock (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\run.js:121:9)  
        at run (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\run.js:71:3)
        at runAndTransformResultsToJestFormat (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapterInit.js:122:21)
        at jestAdapter (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:79:19)
        at runTestInternal (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-runner\build\runTest.js:367:16)       
        at runTest (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-runner\build\runTest.js:444:34)

      19 |             return notification;
      20 |         } catch (error) {
    > 21 |             console.error('Error creating notification:', error);
         |                     ^
      22 |             throw new Error('Failed to create notification');
      23 |         }
      24 |     }

      at Function.error [as createNotification] (app/controllers/notificationController.js:21:21)
      at Object.<anonymous> (tests/notificationController.test.js:89:13)

  console.log
    jobId:  1

      at Function.log [as notifyAdminOnJobOperation] (app/controllers/notificationController.js:32:21)

  console.log                                                                                                                               
    Notification created:  {
      userId: 1,
      title: 'New Job Created',
      description: "A new Job titled 'New Job' has been created.",
      type: 'JOB_POSTED',
      jobId: 1,
      jobAssignmentId: null,
      notificationId: 1,
      save: [Function: mockConstructor] {
        _isMockFunction: true,
        getMockImplementation: [Function (anonymous)],
        mock: [Getter/Setter],
        mockClear: [Function (anonymous)],
        mockReset: [Function (anonymous)],
        mockRestore: [Function (anonymous)],
        mockReturnValueOnce: [Function (anonymous)],
        mockResolvedValueOnce: [Function (anonymous)],
        mockRejectedValueOnce: [Function (anonymous)],
        mockReturnValue: [Function (anonymous)],
        mockResolvedValue: [Function (anonymous)],
        mockRejectedValue: [Function (anonymous)],
        mockImplementationOnce: [Function (anonymous)],
        withImplementation: [Function: bound withImplementation],
        mockImplementation: [Function (anonymous)],
        mockReturnThis: [Function (anonymous)],
        mockName: [Function (anonymous)],
        getMockName: [Function (anonymous)]
      }
    }

      at Function.log [as createNotification] (app/controllers/notificationController.js:18:21)

  console.log                                                                                                                               
    Notification created:  {                                                                                                                
      userId: 2,
      title: 'New Job Created',
      description: "A new Job titled 'New Job' has been created.",
      type: 'JOB_POSTED',
      jobId: 1,
      jobAssignmentId: null,
      notificationId: 1,
      save: [Function: mockConstructor] {
        _isMockFunction: true,
        getMockImplementation: [Function (anonymous)],
        mock: [Getter/Setter],
        mockClear: [Function (anonymous)],
        mockReset: [Function (anonymous)],
        mockRestore: [Function (anonymous)],
        mockReturnValueOnce: [Function (anonymous)],
        mockResolvedValueOnce: [Function (anonymous)],
        mockRejectedValueOnce: [Function (anonymous)],
        mockReturnValue: [Function (anonymous)],
        mockResolvedValue: [Function (anonymous)],
        mockRejectedValue: [Function (anonymous)],
        mockImplementationOnce: [Function (anonymous)],
        withImplementation: [Function: bound withImplementation],
        mockImplementation: [Function (anonymous)],
        mockReturnThis: [Function (anonymous)],
        mockName: [Function (anonymous)],
        getMockName: [Function (anonymous)]
      }
    }

      at Function.log [as createNotification] (app/controllers/notificationController.js:18:21)

  console.error                                                                                                                             
    Error notifying admin on job operation: Error: Invalid operation type
        at Function.notifyAdminOnJobOperation (C:\Users\User\Desktop\Freelance Hiring Platform\backend\app\controllers\notificationController.js:30:23)
        at Object.notifyAdminOnJobOperation (C:\Users\User\Desktop\Freelance Hiring Platform\backend\tests\notificationController.test.js:114:40)
        at Promise.then.completed (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\utils.js:298:28)  
        at new Promise (<anonymous>)
        at callAsyncCircusFn (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\utils.js:231:10)       
        at _callCircusTest (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\run.js:252:3)
        at _runTestsForDescribeBlock (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\run.js:126:9)  
        at _runTestsForDescribeBlock (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\run.js:121:9)  
        at _runTestsForDescribeBlock (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\run.js:121:9)  
        at run (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\run.js:71:3)
        at runAndTransformResultsToJestFormat (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapterInit.js:122:21)
        at jestAdapter (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:79:19)
        at runTestInternal (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-runner\build\runTest.js:367:16)       
        at runTest (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\jest-runner\build\runTest.js:444:34)

      60 |             }
      61 |         } catch (error) {
    > 62 |             console.error('Error notifying admin on job operation:', error);
         |                     ^
      63 |             throw error;
      64 |         }
      65 |     }

      at Function.error [as notifyAdminOnJobOperation] (app/controllers/notificationController.js:62:21)
      at Object.notifyAdminOnJobOperation (tests/notificationController.test.js:114:40)

  console.log                                                                                                                               
    Notification created:  {                                                                                                                
      userId: 2,
      title: 'Job Status Update',
      description: 'The Job you were assigned to has been completed.',
      type: 'COMPLETED',
      jobId: 1,
      jobAssignmentId: null,
      notificationId: 1,
      save: [Function: mockConstructor] {
        _isMockFunction: true,
        getMockImplementation: [Function (anonymous)],
        mock: [Getter/Setter],
        mockClear: [Function (anonymous)],
        mockReset: [Function (anonymous)],
        mockRestore: [Function (anonymous)],
        mockReturnValueOnce: [Function (anonymous)],
        mockResolvedValueOnce: [Function (anonymous)],
        mockRejectedValueOnce: [Function (anonymous)],
        mockReturnValue: [Function (anonymous)],
        mockResolvedValue: [Function (anonymous)],
        mockRejectedValue: [Function (anonymous)],
        mockImplementationOnce: [Function (anonymous)],
        withImplementation: [Function: bound withImplementation],
        mockImplementation: [Function (anonymous)],
        mockReturnThis: [Function (anonymous)],
        mockName: [Function (anonymous)],
        getMockName: [Function (anonymous)]
      }
    }

      at Function.log [as createNotification] (app/controllers/notificationController.js:18:21)

  console.log                                                                                                                               
    Notification created:  {
      userId: 3,
      title: 'Job Status Update',
      description: 'The Job you were assigned to has been completed.',
      type: 'COMPLETED',
      jobId: 1,
      jobAssignmentId: null,
      notificationId: 1,
      save: [Function: mockConstructor] {
        _isMockFunction: true,
        getMockImplementation: [Function (anonymous)],
        mock: [Getter/Setter],
        mockClear: [Function (anonymous)],
        mockReset: [Function (anonymous)],
        mockRestore: [Function (anonymous)],
        mockReturnValueOnce: [Function (anonymous)],
        mockResolvedValueOnce: [Function (anonymous)],
        mockRejectedValueOnce: [Function (anonymous)],
        mockReturnValue: [Function (anonymous)],
        mockResolvedValue: [Function (anonymous)],
        mockRejectedValue: [Function (anonymous)],
        mockImplementationOnce: [Function (anonymous)],
        withImplementation: [Function: bound withImplementation],
        mockImplementation: [Function (anonymous)],
        mockReturnThis: [Function (anonymous)],
        mockName: [Function (anonymous)],
        getMockName: [Function (anonymous)]
      }
    }

      at Function.log [as createNotification] (app/controllers/notificationController.js:18:21)

  console.log                                                                                                                               
    Notification created:  {                                                                                                                
      userId: 1,
      title: 'Job Status Update',
      description: 'The Job titled Completed Job has been completed.',
      type: 'COMPLETED',
      jobId: 1,
      jobAssignmentId: null,
      notificationId: 1,
      save: [Function: mockConstructor] {
        _isMockFunction: true,
        getMockImplementation: [Function (anonymous)],
        mock: [Getter/Setter],
        mockClear: [Function (anonymous)],
        mockReset: [Function (anonymous)],
        mockRestore: [Function (anonymous)],
        mockReturnValueOnce: [Function (anonymous)],
        mockResolvedValueOnce: [Function (anonymous)],
        mockRejectedValueOnce: [Function (anonymous)],
        mockReturnValue: [Function (anonymous)],
        mockResolvedValue: [Function (anonymous)],
        mockRejectedValue: [Function (anonymous)],
        mockImplementationOnce: [Function (anonymous)],
        withImplementation: [Function: bound withImplementation],
        mockImplementation: [Function (anonymous)],
        mockReturnThis: [Function (anonymous)],
        mockName: [Function (anonymous)],
        getMockName: [Function (anonymous)]
      }
    }

      at Function.log [as createNotification] (app/controllers/notificationController.js:18:21)

  console.log                                                                                                                               
    Notification created:  {                                                                                                                
      userId: 2,
      title: 'Job Status Update',
      description: 'The Job titled Completed Job has been completed.',
      type: 'COMPLETED',
      jobId: 1,
      jobAssignmentId: null,
      notificationId: 1,
      save: [Function: mockConstructor] {
        _isMockFunction: true,
        getMockImplementation: [Function (anonymous)],
        mock: [Getter/Setter],
        mockClear: [Function (anonymous)],
        mockReset: [Function (anonymous)],
        mockRestore: [Function (anonymous)],
        mockReturnValueOnce: [Function (anonymous)],
        mockResolvedValueOnce: [Function (anonymous)],
        mockRejectedValueOnce: [Function (anonymous)],
        mockReturnValue: [Function (anonymous)],
        mockResolvedValue: [Function (anonymous)],
        mockRejectedValue: [Function (anonymous)],
        mockImplementationOnce: [Function (anonymous)],
        withImplementation: [Function: bound withImplementation],
        mockImplementation: [Function (anonymous)],
        mockReturnThis: [Function (anonymous)],
        mockName: [Function (anonymous)],
        getMockName: [Function (anonymous)]
      }
    }

      at Function.log [as createNotification] (app/controllers/notificationController.js:18:21)

  console.error
    Error marking notification as read: Error: Notification not found
        at Function.markNotificationAsRead (C:\Users\User\Desktop\Freelance Hiring Platform\backend\app\controllers\notificationController.js:220:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at Object.<anonymous> (C:\Users\User\Desktop\Freelance Hiring Platform\backend\tests\notificationController.test.js:184:13)

      224 |             return notification;
      225 |         } catch (error) {
    > 226 |             console.error('Error marking notification as read:', error);
          |                     ^
      227 |             throw error;
      228 |         }
      229 |     }

      at Function.error [as markNotificationAsRead] (app/controllers/notificationController.js:226:21)
      at Object.<anonymous> (tests/notificationController.test.js:184:13)

  console.log
    Notification created:  {
      userId: 1,
      title: 'New Ticket Created for Job: Test Job',
      description: 'Complaint: Issue 1',
      type: 'TICKET',
      jobId: 1,
      jobAssignmentId: null,
      notificationId: 1,
      save: [Function: mockConstructor] {
        _isMockFunction: true,
        getMockImplementation: [Function (anonymous)],
        mock: [Getter/Setter],
        mockClear: [Function (anonymous)],
        mockReset: [Function (anonymous)],
        mockRestore: [Function (anonymous)],
        mockReturnValueOnce: [Function (anonymous)],
        mockResolvedValueOnce: [Function (anonymous)],
        mockRejectedValueOnce: [Function (anonymous)],
        mockReturnValue: [Function (anonymous)],
        mockResolvedValue: [Function (anonymous)],
        mockRejectedValue: [Function (anonymous)],
        mockImplementationOnce: [Function (anonymous)],
        withImplementation: [Function: bound withImplementation],
        mockImplementation: [Function (anonymous)],
        mockReturnThis: [Function (anonymous)],
        mockName: [Function (anonymous)],
        getMockName: [Function (anonymous)]
      }
    }

      at Function.log [as createNotification] (app/controllers/notificationController.js:18:21)

  console.log                                                                                                                               
    Notification created:  {                                                                                                                
      userId: 2,
      title: 'New Ticket Created for Job: Test Job',
      description: 'Complaint: Issue 1',
      type: 'TICKET',
      jobId: 1,
      jobAssignmentId: null,
      notificationId: 1,
      save: [Function: mockConstructor] {
        _isMockFunction: true,
        getMockImplementation: [Function (anonymous)],
        mock: [Getter/Setter],
        mockClear: [Function (anonymous)],
        mockReset: [Function (anonymous)],
        mockRestore: [Function (anonymous)],
        mockReturnValueOnce: [Function (anonymous)],
        mockResolvedValueOnce: [Function (anonymous)],
        mockRejectedValueOnce: [Function (anonymous)],
        mockReturnValue: [Function (anonymous)],
        mockResolvedValue: [Function (anonymous)],
        mockRejectedValue: [Function (anonymous)],
        mockImplementationOnce: [Function (anonymous)],
        withImplementation: [Function: bound withImplementation],
        mockImplementation: [Function (anonymous)],
        mockReturnThis: [Function (anonymous)],
        mockName: [Function (anonymous)],
        getMockName: [Function (anonymous)]
      }
    }

      at Function.log [as createNotification] (app/controllers/notificationController.js:18:21)

  console.log
    Notification created:  {
      userId: 1,
      title: 'New Ticket Created for Job: Test Job',
      description: 'Complaint: Issue 2',
      type: 'TICKET',
      jobId: 1,
      jobAssignmentId: null,
      notificationId: 1,
      save: [Function: mockConstructor] {
        _isMockFunction: true,
        getMockImplementation: [Function (anonymous)],
        mock: [Getter/Setter],
        mockClear: [Function (anonymous)],
        mockReset: [Function (anonymous)],
        mockRestore: [Function (anonymous)],
        mockReturnValueOnce: [Function (anonymous)],
        mockResolvedValueOnce: [Function (anonymous)],
        mockRejectedValueOnce: [Function (anonymous)],
        mockReturnValue: [Function (anonymous)],
        mockResolvedValue: [Function (anonymous)],
        mockRejectedValue: [Function (anonymous)],
        mockImplementationOnce: [Function (anonymous)],
        withImplementation: [Function: bound withImplementation],
        mockImplementation: [Function (anonymous)],
        mockReturnThis: [Function (anonymous)],
        mockName: [Function (anonymous)],
        getMockName: [Function (anonymous)]
      }
    }

      at Function.log [as createNotification] (app/controllers/notificationController.js:18:21)

  console.log                                                                                                                               
    Notification created:  {                                                                                                                
      userId: 2,
      title: 'New Ticket Created for Job: Test Job',
      description: 'Complaint: Issue 2',
      type: 'TICKET',
      jobId: 1,
      jobAssignmentId: null,
      notificationId: 1,
      save: [Function: mockConstructor] {
        _isMockFunction: true,
        getMockImplementation: [Function (anonymous)],
        mock: [Getter/Setter],
        mockClear: [Function (anonymous)],
        mockReset: [Function (anonymous)],
        mockRestore: [Function (anonymous)],
        mockReturnValueOnce: [Function (anonymous)],
        mockResolvedValueOnce: [Function (anonymous)],
        mockRejectedValueOnce: [Function (anonymous)],
        mockReturnValue: [Function (anonymous)],
        mockResolvedValue: [Function (anonymous)],
        mockRejectedValue: [Function (anonymous)],
        mockImplementationOnce: [Function (anonymous)],
        withImplementation: [Function: bound withImplementation],
        mockImplementation: [Function (anonymous)],
        mockReturnThis: [Function (anonymous)],
        mockName: [Function (anonymous)],
        getMockName: [Function (anonymous)]
      }
    }

      at Function.log [as createNotification] (app/controllers/notificationController.js:18:21)

  console.log                                                                                                                               
    Notifications sent successfully.                                                                                                        

      at Function.log [as sendTicketNotification] (app/controllers/notificationController.js:276:21)

 PASS  tests/notificationController.test.js
  NotificationController
    createNotification                                                                                                                      
      √ should create a notification successfully (20 ms)                                                                                   
      √ should handle creation errors (66 ms)                                                                                               
    notifyAdminOnJobOperation                                                                                                               
      √ should notify admins on job creation (18 ms)                                                                                        
      √ should handle invalid operations (10 ms)                                                                                            
    displayAllNotificationsForAdmin                                                                                                         
      √ should retrieve notifications with associations (3 ms)                                                                              
    notifyJobStatusChange                                                                                                                   
      √ should notify relevant parties when job is completed (20 ms)                                                                        
    markNotificationAsRead                                                                                                                  
      √ should update notification read status (5 ms)                                                                                       
      √ should handle missing notification (11 ms)                                                                                          
    getUnreadNotificationsCount                                                                                                             
      √ should return correct count (3 ms)                                                                                                  
    sendTicketNotification                                                                                                                  
      √ should notify admins about new tickets (21 ms)                                                                                      

---------------------------|---------|----------|---------|---------|---------------------------------------------------------------        
File                       | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                                     
---------------------------|---------|----------|---------|---------|---------------------------------------------------------------
All files                  |      33 |    26.74 |      50 |      33 |                                                              
 notificationController.js |      33 |    26.74 |      50 |      33 | 36,46-56,80-81,96,109-211,242-243,253,257,261-262,266,278-410
---------------------------|---------|----------|---------|---------|---------------------------------------------------------------        
Test Suites: 1 passed, 1 total
Tests:       10 passed, 10 total
Snapshots:   0 total
Time:        1.804 s, estimated 2 s
Ran all test suites.

ReferenceError: You are trying to `import` a file after the Jest environment has been torn down. From tests/notificationController.test.js. 

      at Object.getCodec (node_modules/mysql2/node_modules/iconv-lite/lib/index.js:63:27)
      at Object.getDecoder (node_modules/mysql2/node_modules/iconv-lite/lib/index.js:125:23)
      at Object.<anonymous>.exports.decode (node_modules/mysql2/lib/parsers/string.js:20:23)
      at Packet.readNullTerminatedString (node_modules/mysql2/lib/packets/packet.js:412:25)
      at Function.fromPacket (node_modules/mysql2/lib/packets/handshake.js:62:33)
      at ClientHandshake.handshakeInit (node_modules/mysql2/lib/commands/client_handshake.js:112:40)
      at ClientHandshake.execute (node_modules/mysql2/lib/commands/command.js:45:22)
      at Connection.handlePacket (node_modules/mysql2/lib/connection.js:481:34)
      at PacketParser.onPacket (node_modules/mysql2/lib/connection.js:97:12)
      at PacketParser.executeStart (node_modules/mysql2/lib/packet_parser.js:75:16)
      at Socket.<anonymous> (node_modules/mysql2/lib/connection.js:104:25)
  console.error
    Error creating tables: ConnectionError [SequelizeConnectionError]: Encoding not recognized: 'cesu8' (searched as: 'cesu8')
        at ConnectionManager.connect (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\sequelize\src\dialects\mysql\connection-manager.js:126:17)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at ConnectionManager._connect (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\sequelize\src\dialects\abstract\connection-manager.js:332:24)
        at C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\sequelize\src\dialects\abstract\connection-manager.js:250:32
        at ConnectionManager.getConnection (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\sequelize\src\dialects\abstract\connection-manager.js:280:7)
        at C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\sequelize\src\sequelize.js:638:26
        at Sequelize.authenticate (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\sequelize\src\sequelize.js:972:5)   
        at Sequelize.sync (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\sequelize\src\sequelize.js:812:7)
        at C:\Users\User\Desktop\Freelance Hiring Platform\backend\config\dbConfig.js:45:5 {
      parent: Error: Encoding not recognized: 'cesu8' (searched as: 'cesu8')
          at Object.getCodec (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\node_modules\iconv-lite\lib\index.js:104:23)
          at Object.getDecoder (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\node_modules\iconv-lite\lib\index.js:125:23)
          at Object.<anonymous>.exports.decode (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\parsers\string.js:20:23)
          at Packet.readNullTerminatedString (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\packets\packet.js:412:25)
          at Function.fromPacket (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\packets\handshake.js:62:33)
          at ClientHandshake.handshakeInit (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\commands\client_handshake.js:112:40)
          at ClientHandshake.execute (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\commands\command.js:45:22)
          at Connection.handlePacket (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\connection.js:481:34) 
          at PacketParser.onPacket (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\connection.js:97:12)    
          at PacketParser.executeStart (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\packet_parser.js:75:16)
          at Socket.<anonymous> (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\connection.js:104:25)      
          at Socket.emit (node:events:519:28)
          at addChunk (node:internal/streams/readable:559:12)
          at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)
          at Socket.Readable.push (node:internal/streams/readable:390:5)
          at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {
        fatal: true
      },
      original: Error: Encoding not recognized: 'cesu8' (searched as: 'cesu8')
          at Object.getCodec (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\node_modules\iconv-lite\lib\index.js:104:23)
          at Object.getDecoder (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\node_modules\iconv-lite\lib\index.js:125:23)
          at Object.<anonymous>.exports.decode (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\parsers\string.js:20:23)
          at Packet.readNullTerminatedString (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\packets\packet.js:412:25)
          at Function.fromPacket (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\packets\handshake.js:62:33)
          at ClientHandshake.handshakeInit (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\commands\client_handshake.js:112:40)
          at ClientHandshake.execute (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\commands\command.js:45:22)
          at Connection.handlePacket (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\connection.js:481:34) 
          at PacketParser.onPacket (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\connection.js:97:12)    
          at PacketParser.executeStart (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\packet_parser.js:75:16)
          at Socket.<anonymous> (C:\Users\User\Desktop\Freelance Hiring Platform\backend\node_modules\mysql2\lib\connection.js:104:25)      
          at Socket.emit (node:events:519:28)
          at addChunk (node:internal/streams/readable:559:12)
          at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)
          at Socket.Readable.push (node:internal/streams/readable:390:5)
          at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {
        fatal: true
      }
    }

      192 |     // console.log("done")
      193 |   } catch (err) {
    > 194 |     console.error('Error creating tables:', err);
          |             ^
      195 |   }
      196 | })();
      197 |

      at error (config/dbConfig.js:194:13)

PS C:\Users\User\Desktop\Freelance Hiring Platform\backend> 