{"numFailedTestSuites":1,"numFailedTests":1,"numPassedTestSuites":0,"numPassedTests":48,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":49,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1746021127878,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["WorkLogController","createWorkLog"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController createWorkLog should return 400 if required fields are missing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 if required fields are missing"},{"ancestorTitles":["WorkLogController","createWorkLog"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController createWorkLog should return 400 if hoursLog is invalid (negative)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if hoursLog is invalid (negative)"},{"ancestorTitles":["WorkLogController","createWorkLog"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController createWorkLog should return 400 if hoursLog is not a number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if hoursLog is not a number"},{"ancestorTitles":["WorkLogController","createWorkLog"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController createWorkLog should return 400 if date is invalid","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if date is invalid"},{"ancestorTitles":["WorkLogController","createWorkLog"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController createWorkLog should return 400 if biller is not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if biller is not found"},{"ancestorTitles":["WorkLogController","createWorkLog"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController createWorkLog should return 400 if biller is not BILLER","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if biller is not BILLER"},{"ancestorTitles":["WorkLogController","createWorkLog"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController createWorkLog should return 400 if job is not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if job is not found"},{"ancestorTitles":["WorkLogController","createWorkLog"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController createWorkLog should create work log and return 201","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create work log and return 201"},{"ancestorTitles":["WorkLogController","createWorkLog"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController createWorkLog should return 400 for Sequelize validation error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 for Sequelize validation error"},{"ancestorTitles":["WorkLogController","createWorkLog"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController createWorkLog should return 500 for unknown error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 500 for unknown error"},{"ancestorTitles":["WorkLogController","updateWorkLog"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController updateWorkLog should return 404 if work log not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 if work log not found"},{"ancestorTitles":["WorkLogController","updateWorkLog"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController updateWorkLog should update work log and return 200","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update work log and return 200"},{"ancestorTitles":["WorkLogController","updateWorkLog"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController updateWorkLog should return 500 on update error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 500 on update error"},{"ancestorTitles":["WorkLogController","getAllWorkLogs"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController getAllWorkLogs should return all work logs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return all work logs"},{"ancestorTitles":["WorkLogController","getAllWorkLogs"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController getAllWorkLogs should return 500 on error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 500 on error"},{"ancestorTitles":["WorkLogController","getWorkLogById"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController getWorkLogById should return 404 if not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 if not found"},{"ancestorTitles":["WorkLogController","getWorkLogById"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController getWorkLogById should return work log if found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return work log if found"},{"ancestorTitles":["WorkLogController","getWorkLogById"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController getWorkLogById should return 500 on error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 500 on error"},{"ancestorTitles":["WorkLogController","getWorkLogsByBillerAndJobId"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController getWorkLogsByBillerAndJobId should return work logs for biller and job","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return work logs for biller and job"},{"ancestorTitles":["WorkLogController","getWorkLogsByBillerAndJobId"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController getWorkLogsByBillerAndJobId should return 500 on error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 500 on error"},{"ancestorTitles":["WorkLogController","getWorkLogsByBillerId"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController getWorkLogsByBillerId should return work logs for biller","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return work logs for biller"},{"ancestorTitles":["WorkLogController","getWorkLogsByBillerId"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController getWorkLogsByBillerId should return 500 on error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 500 on error"},{"ancestorTitles":["WorkLogController","getWorkLogsByClientId"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController getWorkLogsByClientId should return 404 if user not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 if user not found"},{"ancestorTitles":["WorkLogController","getWorkLogsByClientId"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController getWorkLogsByClientId should return empty array if no jobs found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return empty array if no jobs found"},{"ancestorTitles":["WorkLogController","getWorkLogsByClientId"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController getWorkLogsByClientId should return work logs for client","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return work logs for client"},{"ancestorTitles":["WorkLogController","getWorkLogsByClientId"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController getWorkLogsByClientId should return 500 on error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 500 on error"},{"ancestorTitles":["WorkLogController","deleteWorkLog"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController deleteWorkLog should return 404 if not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 if not found"},{"ancestorTitles":["WorkLogController","deleteWorkLog"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController deleteWorkLog should delete work log and return 200","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should delete work log and return 200"},{"ancestorTitles":["WorkLogController","deleteWorkLog"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController deleteWorkLog should return 500 on error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 500 on error"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if hoursLog is zero","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if hoursLog is zero"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if hoursLog is a float","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if hoursLog is a float"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if taskDescription is whitespace","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if taskDescription is whitespace"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if date is in the future","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if date is in the future"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if date is before 1970","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if date is before 1970"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if billerId is a string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if billerId is a string"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if jobId is a string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if jobId is a string"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if taskDescription is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if taskDescription is missing"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if date is null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if date is null"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if hoursLog is null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if hoursLog is null"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if billerId is null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if billerId is null"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if jobId is null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if jobId is null"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if all fields are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if all fields are null"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if extra unexpected fields are present","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if extra unexpected fields are present"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if body is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if body is missing"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if body is not an object","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if body is not an object"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":9,"failureDetails":[{"matcherResult":{"actual":201,"expected":400,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m201\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m201\u001b[39m\n    at Object.toBe (C:\\Users\\User\\Desktop\\Freelance Hiring Platform\\backend\\tests\\workLogController.test.js:471:36)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if hoursLog is Infinity","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return 400 if hoursLog is Infinity"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if hoursLog is NaN","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if hoursLog is NaN"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if taskDescription is extremely long","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if taskDescription is extremely long"},{"ancestorTitles":["WorkLogController","More edge cases for createWorkLog"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"WorkLogController More edge cases for createWorkLog should return 400 if taskDescription contains only special characters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if taskDescription contains only special characters"}],"endTime":1746021129889,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mWorkLogController › More edge cases for createWorkLog › should return 400 if hoursLog is Infinity\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m400\u001b[39m\n    Received: \u001b[31m201\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 469 |\u001b[39m             \u001b[36mconst\u001b[39m res \u001b[33m=\u001b[39m httpMocks\u001b[33m.\u001b[39mcreateResponse()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 470 |\u001b[39m             \u001b[36mawait\u001b[39m \u001b[33mWorkLogController\u001b[39m\u001b[33m.\u001b[39mcreateWorkLog(req\u001b[33m,\u001b[39m res)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 471 |\u001b[39m             expect(res\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoBe(\u001b[35m400\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 472 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 473 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 474 |\u001b[39m         it(\u001b[32m'should return 400 if hoursLog is NaN'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/workLogController.test.js\u001b[39m\u001b[0m\u001b[2m:471:36)\u001b[22m\u001b[2m\u001b[22m\n","name":"C:\\Users\\User\\Desktop\\Freelance Hiring Platform\\backend\\tests\\workLogController.test.js","startTime":1746021127949,"status":"failed","summary":""}],"wasInterrupted":false}
